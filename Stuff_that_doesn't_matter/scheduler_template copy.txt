
// THIS IS JUST TO SEE THE ORIENTATION OF THE COMMENTS IN THE TEMPLATE

void Scheduler::run_mfq( ) {
  cerr << "scheduler (multilevel feedback queue): started" << endl;
  int current = 0;  // current pid
  int previous = 0; // previous pid
  
  int slices[3];                          // slice[i] means that level i's current time slice.
  for ( int i = 0; i < 3; i++ )
    slices[i] = 0;                        // all levels start slice 0.

  while ( true ) {
    int level = 0;
    for ( ; level < 3; level++ ) {
      // if the current level's slice is 0.
        // check the current level queue is empty. 
          // if so, go to a next lower level queue.
        // otherwise, pick up a pid from this queue
      // if the current level's slide is 1, 2, or 3, the previous process should run continuously.
    }
    // if we reached level 3, (i.e., the lowest level) and found no processes to schedul
    // finish scheduler.cpp

    // check if a process to run is still active.
    // if so, resumt it, calls schedulerSleep( ) to give a time quantum.
    // then, suspends it.

    // check if this process is still active.
    // if so and if the current level is 1 or 2, shift to a next slice
    // if the next slice was wrapped back to 0. this pid should
      // go to the next level queue or
      // go back to the lowest level queue
    // current process is dead, print out: 
      cerr << "scheduler: confirmed " << current << "'s termination" << endl;
  }
  cerr << "scheduler: has no more process to run" << endl;
}
